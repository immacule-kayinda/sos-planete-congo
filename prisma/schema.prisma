// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  password              String
  role                  Role      @default(STUDENT)
  isEmailVerified       Boolean   @default(false)
  emailVerificationToken String?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  lastLogin            DateTime?
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  teacher              Teacher?
  student              Student?
  admin                Admin?
}

model Teacher {
  id              String      @id @default(uuid())
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id])
  firstName       String
  lastName        String
  address         String
  phoneNumber     String
  voterCardNumber String
  school          String
  teachingLevel   String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  students        Student[]
  Classroom       Classroom[]
}

model Student {
  id                     String                   @id @default(uuid())
  userId                 String                   @unique
  user                   User                     @relation(fields: [userId], references: [id])
  age                    Int
  teacherId              String?
  teacher                Teacher?                 @relation(fields: [teacherId], references: [id])
  performance            StudentPerformance?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Classroom              Classroom?               @relation(fields: [classroomId], references: [id])
  classroomId            String?
  StudentChapterProgress StudentChapterProgress[]
  StudentStreak          StudentStreak?
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id                 String               @id @default(uuid())
  title              String
  description        String
  conte              Conte?
  chapters           Chapter[]
  quizzes            Quiz[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  StudentPerformance StudentPerformance[]
}

model Conte {
  id         String   @id @default(uuid())
  moduleId   String   @unique
  module     Module   @relation(fields: [moduleId], references: [id])
  text       String
  audioUrl   String
  imagesUrls String[] // Tableau d'URLs d'illustrations
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Chapter {
  id        String                   @id @default(uuid())
  moduleId  String
  module    Module                   @relation(fields: [moduleId], references: [id])
  title     String
  content   String
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  progress  StudentChapterProgress[]
}

model Quiz {
  id        String     @id @default(uuid())
  moduleId  String
  module    Module     @relation(fields: [moduleId], references: [id])
  title     String
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id          String       @id @default(uuid())
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id])
  type        QuestionType
  question    String
  options     Option[]
  correctText String? // pour les questions ouvertes
}

model Option {
  id         String   @id @default(uuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean  @default(false)
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
}

model StudentChapterProgress {
  id        String  @id @default(uuid())
  studentId String
  chapterId String
  isRead    Boolean @default(false)
  isCurrent Boolean @default(false)

  student Student @relation(fields: [studentId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, chapterId])
}

model StudentPerformance {
  id        String   @id @default(uuid())
  studentId String   @unique
  moduleId  String
  stars     Int      @default(0)
  timeSpent Int      @default(0) // en secondes
  accuracy  Float    @default(0) // entre 0 et 1
  student   Student  @relation(fields: [studentId], references: [id])
  module    Module   @relation(fields: [moduleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, moduleId])
}

model StudentStreak {
  id            String   @id @default(uuid())
  studentId     String   @unique
  currentStreak Int      @default(0)
  lastActive    DateTime

  student Student @relation(fields: [studentId], references: [id])
}

model Classroom {
  id        String    @id @default(uuid())
  name      String // ex: "CM2A"
  students  Student[]
  createdAt DateTime  @default(now())
  Teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId String?
}
